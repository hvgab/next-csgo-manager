// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Server {
  id           String  @id @default(cuid())
  host         String
  port         Int
  rconPassword String?
  owner        User    @relation("ServerUserOwner", fields: [ownerUserId], references: [id])
  ownerUserId  String
  admins       User[]  @relation("ServerUserAdmins")
  match        Match[]
}

model Team {
  id   String  @id @default(cuid())
  name String
  tag  String  @default("")
  flag String  @default("NO")
  logo String?

  player1       String?
  player2       String?
  player3       String?
  player4       String?
  player5       String?
  player6       String?
  player7       String?
  matchAsWinner Match[]         @relation("MatchTeamAsWinner")
  matchAsTeam1  Match[]         @relation("MatchTeamAsTeam1")
  matchAsTeam2  Match[]         @relation("MatchTeamAsTeam2")
  playersOnTeam PlayersOnTeam[]
}

model PlayersOnTeam {
  team       Team     @relation(fields: [teamId], references: [id])
  player     User     @relation(fields: [userId], references: [id])
  assignedAt DateTime @default(now())
  teamId     String
  userId     String

  @@id([teamId, userId])
}

model Match {
  id             String    @id @default(cuid())
  gameServerId   String?
  matchTitle     String?   @default("")
  matchDateTime  DateTime?
  clinchSeries   Boolean   @default(true)
  numMaps        Int       @default(3)
  playersPerTeam Int       @default(5)
  skipVeto       Boolean   @default(false)
  maplist        String    @default("")
  team1Id        String?
  team2Id        String?
  seriesType     String
  winnerId       String?
  pluginVersion  String?   @default("unknown")
  forfeit        Boolean?  @default(false)
  cancelled      Boolean?  @default(false)
  finished       Boolean?  @default(false)
  startTime      DateTime?
  endTime        DateTime?
  maxMaps        Int?
  title          String?   @default("")
  apiKey         String?   @default("")
  vetoMappool    String?   @default("")
  team1Score     Int?
  team2Score     Int?

  team1      Team?   @relation("MatchTeamAsTeam1", fields: [team1Id], references: [id])
  team2      Team?   @relation("MatchTeamAsTeam2", fields: [team2Id], references: [id])
  teamWinner Team?   @relation("MatchTeamAsWinner", fields: [winnerId], references: [id])
  gameServer Server? @relation(fields: [gameServerId], references: [id])
}

model Organization {
  id      String @id @default(cuid())
  name    String
  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String
  admins  User[] @relation("OrganizationAdmins")
  cup     Cup[]
}

model Cup {
  id             String        @id @default(cuid())
  name           String
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  owner          User          @relation(fields: [ownerId], references: [id])
  ownerId        String
  admins         User[]        @relation("CupAdmins")
}

// AUTH
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
//   shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
// }

// generator client {
//   provider        = "prisma-client-js"
//   previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
// }

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  // refresh_token     String? @db.Text
  refresh_token     String?
  // access_token      String? @db.Text
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  // id_token          String? @db.Text
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  adminServers           Server[]        @relation("ServerUserAdmins")
  ownerServers           Server[]        @relation("ServerUserOwner")
  organizationSetAsOwner Organization[]
  organizationSetAsAdmin Organization[]  @relation("OrganizationAdmins")
  cupSetAsOwner          Cup[]
  cupSetAsAdmin          Cup[]           @relation("CupAdmins")
  onTeams                PlayersOnTeam[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
